diff --git a/fs/ecryptfs/ecryptfs_kernel.h b/fs/ecryptfs/ecryptfs_kernel.h
index f622a73..a6b4778 100644
--- a/fs/ecryptfs/ecryptfs_kernel.h
+++ b/fs/ecryptfs/ecryptfs_kernel.h
@@ -546,7 +546,7 @@ void __ecryptfs_printk(const char *fmt, ...);
 extern const struct file_operations ecryptfs_main_fops;
 extern const struct file_operations ecryptfs_dir_fops;
 extern const struct inode_operations ecryptfs_main_iops;
-extern const struct inode_operations ecryptfs_dir_iops;
+extern const struct inode_operations_wrapper ecryptfs_dir_iops;
 extern const struct inode_operations ecryptfs_symlink_iops;
 extern const struct super_operations ecryptfs_sops;
 extern const struct dentry_operations ecryptfs_dops;
diff --git a/fs/ecryptfs/inode.c b/fs/ecryptfs/inode.c
index 1648908..1ab5ba1 100644
--- a/fs/ecryptfs/inode.c
+++ b/fs/ecryptfs/inode.c
@@ -71,12 +71,16 @@ static int ecryptfs_inode_set(struct inode *inode, void *opaque)
 	inode->i_mapping->a_ops = &ecryptfs_aops;
 	inode->i_mapping->backing_dev_info = inode->i_sb->s_bdi;
 
-	if (S_ISLNK(inode->i_mode))
+	if (S_ISLNK(inode->i_mode)) {
 		inode->i_op = &ecryptfs_symlink_iops;
-	else if (S_ISDIR(inode->i_mode))
-		inode->i_op = &ecryptfs_dir_iops;
-	else
+	}
+	else if (S_ISDIR(inode->i_mode)) {
+		inode->i_op = &ecryptfs_dir_iops.ops;
+		inode->i_flags |= S_IOPS_WRAPPER;
+	}
+	else {
 		inode->i_op = &ecryptfs_main_iops;
+	}
 
 	if (S_ISDIR(inode->i_mode))
 		inode->i_fop = &ecryptfs_dir_fops;
@@ -659,6 +663,16 @@ out_lock:
 	return rc;
 }
 
+static int ecryptfs_rename2(struct inode *old_dir, struct dentry *old_dentry,
+			 struct inode *new_dir, struct dentry *new_dentry,
+			 unsigned int flags)
+{
+	if (flags & ~RENAME_NOREPLACE)
+		return -EINVAL;
+
+	return ecryptfs_rename(old_dir, old_dentry, new_dir, new_dentry);
+}
+
 static int ecryptfs_readlink_lower(struct dentry *dentry, char **buf,
 				   size_t *bufsiz)
 {
@@ -1122,22 +1136,25 @@ const struct inode_operations ecryptfs_symlink_iops = {
 	.removexattr = ecryptfs_removexattr
 };
 
-const struct inode_operations ecryptfs_dir_iops = {
-	.create = ecryptfs_create,
-	.lookup = ecryptfs_lookup,
-	.link = ecryptfs_link,
-	.unlink = ecryptfs_unlink,
-	.symlink = ecryptfs_symlink,
-	.mkdir = ecryptfs_mkdir,
-	.rmdir = ecryptfs_rmdir,
-	.mknod = ecryptfs_mknod,
-	.rename = ecryptfs_rename,
-	.permission = ecryptfs_permission,
-	.setattr = ecryptfs_setattr,
-	.setxattr = ecryptfs_setxattr,
-	.getxattr = ecryptfs_getxattr,
-	.listxattr = ecryptfs_listxattr,
-	.removexattr = ecryptfs_removexattr
+const struct inode_operations_wrapper ecryptfs_dir_iops = {
+	.ops = {
+		.create = ecryptfs_create,
+		.lookup = ecryptfs_lookup,
+		.link = ecryptfs_link,
+		.unlink = ecryptfs_unlink,
+		.symlink = ecryptfs_symlink,
+		.mkdir = ecryptfs_mkdir,
+		.rmdir = ecryptfs_rmdir,
+		.mknod = ecryptfs_mknod,
+		.rename = ecryptfs_rename,
+		.permission = ecryptfs_permission,
+		.setattr = ecryptfs_setattr,
+		.setxattr = ecryptfs_setxattr,
+		.getxattr = ecryptfs_getxattr,
+		.listxattr = ecryptfs_listxattr,
+		.removexattr = ecryptfs_removexattr
+	},
+	.rename2 = ecryptfs_rename2,
 };
 
 const struct inode_operations ecryptfs_main_iops = {
diff --git a/fs/ecryptfs/main.c b/fs/ecryptfs/main.c
index 8b0957e..9886ebf 100644
--- a/fs/ecryptfs/main.c
+++ b/fs/ecryptfs/main.c
@@ -567,6 +567,7 @@ static struct dentry *ecryptfs_mount(struct file_system_type *fs_type, int flags
 	s->s_maxbytes = path.dentry->d_sb->s_maxbytes;
 	s->s_blocksize = path.dentry->d_sb->s_blocksize;
 	s->s_magic = ECRYPTFS_SUPER_MAGIC;
+#if 0
 	s->s_stack_depth = path.dentry->d_sb->s_stack_depth + 1;
 
 	rc = -EINVAL;
@@ -574,6 +575,7 @@ static struct dentry *ecryptfs_mount(struct file_system_type *fs_type, int flags
 		pr_err("eCryptfs: maximum fs stacking depth exceeded\n");
 		goto out_free;
 	}
+#endif
 
 	inode = ecryptfs_get_inode(path.dentry->d_inode, s);
 	rc = PTR_ERR(inode);
